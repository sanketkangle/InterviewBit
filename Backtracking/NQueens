class Solution:
    # @param A : integer
    # @return a list of list of strings
    def solveNQueens(self, A):
        
# All solutions of N- queen Problem


        def initialize(board, n):
            for key in ['queen', 'row', 'col', 'nwtose', 'swtone']:
                board[key] = {}
            for i in range(n):
                board['queen'][i] = -1
                board['row'][i] = 0
                board['col'][i] = 0
            for i in range(-(n-1), n):
                board['nwtose'][i] = 0
            for i in range(2*n - 1):
                board['swtone'][i] = 0
        
        
        '''def printboard(board):
            for row in sorted(board['queen'].keys()):
                print((row, board['queen'][row]), end = ' ')
            print('')'''
        
        
        def free(i, j, board):
            return (board['row'][i] == 0 and board['col'][j] == 0
                    and board['nwtose'][j-i] == 0 and board['swtone'][j+i]==0 )
        
        
        def addqueen(i, j, board):
            board['queen'][i] = j
            board['row'][i] = 1
            board['col'][j] = 1
            board['nwtose'][j-i] = 1
            board['swtone'][i+j] = 1
        
        
        def undoqueen(i, j, board):
            board['queen'][i] = -1
            board['row'][i] = 0
            board['col'][j] = 0
            board['nwtose'][j - i] = 0
            board['swtone'][i + j] = 0
        
        def record(board, l):
            s = []
            n = len(board['queen'].keys())
            for row in sorted(board['queen'].keys()):
                temp = ''
                p = board['queen'][row]
                for i in range(n):
                    if i == p:
                        temp = temp + 'Q'
                    else:
                        temp = temp + '.'
                s.append(temp)
            l.append(s)
        
        
        
        
        def placequeen(i, board, l):
            n = len(board['queen'].keys())
            for j in range(n):
                if free(i, j, board):
                    addqueen(i, j, board)
                    if i == n-1:
                        record(board, l)
                        #printboard(board)
                    else:
                        extendsol = placequeen(i+1, board, l)
                    undoqueen(i, j, board)
        
        
        
        board = {}
        l = []
        n = A
        initialize(board, n)
        placequeen(0, board, l)
            #printboard(board)
        return l
