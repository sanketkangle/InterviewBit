class Solution:
    # @param A : string
    # @return a list of strings
    
    def __init__(self):
        self.dic = { '0':['0'], '1':['1'], '2':['a', 'b', 'c'], '3':['d', 'e', 'f'], 
        '4': ['i','g', 'h' ], '5':['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7':['p', 'q', 
        'r', 's'], '8':['t', 'u', 'v'], '9':['w', 'x', 'y', 'z']}
        
        
    def letterCombinations(self, A):
        if not A:
            return []
        
        res = []
        line = []
        self.helper(A, 0, res, line)
        return sorted(res)
        
    def helper(self,A, curr, res, line ):
        if len(line) == len(A):
            res.append(''.join([x for x in line]))
            return
        
        for l in self.dic[A[curr]]:
            line.append(l)
            self.helper(A, curr + 1, res, line)
            line.pop()
    
    
