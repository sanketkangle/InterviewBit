# Definition for singly-linked list.
# class ListNode:
#    def __init__(self, x):
#        self.val = x
#        self.next = None

class Solution:
    # @param A : head node of linked list
    # @param B : integer
    # @param C : integer
    # @return the head node in the linked list
    def reverseBetween(self, A, B, C):
        m = B-1
        n = C-1
        if m == n:
            return A
        else:

            curr = A
            prev = None
            count = 0
            while count != m:
                prev = curr
                curr = curr.next
                count += 1
            #now count is m
            start = prev
            end = curr
            ###
            prev = curr
            curr = curr.next
            count += 1
            #now count is 'm + 1'
            while count != n and count:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
                count += 1
            nxt = curr.next
            curr.next = prev

            #now count is n
            if start is None:
                A = curr
                end.next = nxt
            else:
                start.next = curr
                end.next = nxt
            
        return A
