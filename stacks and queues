class Solution:
    # @param A : string
    # @return an integer
    def braces(self, A):
        class Stacks:
            def __init__(self):
                self.items = []
        
            def push(self, item):
                self.items.append(item)
        
            def is_empty(self):
                if self.items == []:
                    return True
                else:
                    return False
            def peek(self):
                if not self.is_empty():
                    return self.items[-1]
        
            def pop(self):
                if not self.is_empty():
                    return self.items.pop(-1)
        
            def get_stack(self):
                return self.items
        stack = Stacks()
        #openi = [ '(', '[', '{']
        i = 0
        while i < len(A):
            if A[i] in '([{':
                stack.push(A[i])
                i = i + 1
                #print(stack.get_stack())
            elif A[i] in '+/-*':
                j = stack.peek()
                if j != 1:
                    stack.push(1)
                    i = i + 1
                    #print(stack.get_stack())
                else:
                    i = i + 1
                    #print(stack.get_stack())
    
            elif A[i] in ')]}':
                prev = stack.peek()
                if prev != 1:
                    #print(stack.get_stack())
                    return 1
                else:
                    stack.pop()
                    prev = stack.peek()
                    if prev in '([}':
                        stack.pop()
                        i = i + 1
                        #print(stack.get_stack())
            else:
                i = i + 1
                #print(stack.get_stack())
        return 0
