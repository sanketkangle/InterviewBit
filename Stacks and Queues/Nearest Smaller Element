class Solution:
    # @param A : list of integers
    # @return a list of integers
    def prevSmaller(self, A):
        
        class Stacks:
            def __init__(self):
                self.items_list = []
        
            def push(self, item):
                self.items_list.append(item)
        
            def is_empty(self):
                if self.items_list == []:
                    return True
                else:
                    return  False
        
            def make_stack_empty(self):
                self.items_list = []
        
            def pop(self):
                if not self.is_empty():
                    self.items_list.pop(-1)
        
            def peek(self):
                if not self.is_empty():
                    return self.items_list[-1]

        
        B = []
        stack = Stacks()
        i=0
        while i in range(len(A)):
            if stack.is_empty():
                B.append(-1)
                stack.push(A[i])
                i = i + 1
    
            else:
                while not stack.is_empty() and i in range(len(A)):
                    if A[i] > int(stack.peek()):
                        B.append(stack.peek())
                        stack.push(A[i])
                        i = i + 1
                        #i = i + 1
                    else:
                        stack.pop()
        return B
